#include <iostream>

using namespace std;

void printBoard(char board[3][3], int rows, int columns);
bool checkWin(char player, char board[3][3]);
bool checkTie(char blank, char board[3][3]);

int main () {
  bool stillPlaying = true;
  bool winCheck = false;
  int win = 0;
  const int PLAY = 0;
  const int X_WIN = 1;
  const int O_WIN = 2;
  char board[3][3];
  const char BLANK = ' ';
  const char X_MOVE = 'X';
  const char O_MOVE = 'O';             
  bool xTurn = true;
  bool oTurn = false;

  int xWins = 0;
  int oWins = 0;
  
  while (stillPlaying == true) {
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
	board[i][j] = BLANK;
      }
    }
    cout << "TicTacToe!" << endl;
    cout << "X will start" << endl;

    win = PLAY;
    while (win == PLAY) {
      char input[3];
      cin.get(input, 3);
      cin.ignore(10, '\n');
      cout << input[0] << input[1] << endl;
      if ((input[0] == 'a' || input[0] == 'b' || input[0] == 'c') &&
	  (input[1] == '1' || input[1] == '2' || input[1] == '3')) {
	int rows = input[0] - 'a';
	int columns = input[1] - '1';
	if (board[rows][columns] != BLANK) {
	  cout << "This space is occupied, choose a different one" << endl;
	}
	else if (xTurn == true) {
	  xTurn = false;
	  oTurn = true;
	  board[rows][columns] = X_MOVE;
	  if (checkWin(X_MOVE, board) == true) {
	    win = X_WIN;
	    xWins++;
	    cout << "X WINS!!!" << endl;
	  }
	}
	else if (oTurn == true) {
	  xTurn = true;
	  oTurn = false;
	  board[rows][columns] = O_MOVE;
	  if (checkWin(O_MOVE, board) == true) {
	    win = O_WIN;
	    oWins++;
	    cout << "O WINS!!!" << endl;
	  }
	}
	printBoard(board, rows, columns);
	if (checkTie(BLANK, board) == true && win == PLAY) {
	  
	}
	if (win != PLAY) {
	  cout << "Do you want to play again? Answer y or n" << endl;
	  char in[2];
	  cin.get(in, 2);
	  cin.ignore(10, '\n');
	  if (in[0] == 'y') {
	    cout << "X Wins = " << xWins;
	    cout << "      O Wins = " << oWins << endl;
	    xTurn = true;
	    oTurn = false;
	  }
	  else if (in[0] == 'n') {
	    stillPlaying = false;
	  }
	}
      }
      else {
	cout << "Input a valid move" << endl;
      }
    }
  }
}

void printBoard(char board[3][3], int rows, int columns) {
  cout << " \t1\t2\t3" << endl;
  cout << "a\t" << board[0][0] << "\t" << board[0][1] << "\t" << board[0][2] << endl << endl;
  cout << "b\t" << board[1][0] << "\t" << board[1][1] << "\t" << board[1][2] << endl << endl;
  cout << "c\t" << board[2][0] << "\t" << board[2][1] << "\t" << board[2][2] << endl;
}

bool checkWin(char player, char board[3][3]) {
  if (board[0][0] == player && board[0][1] == player && board[0][2] == player) {
    return true;
  }
  if (board[1][0] == player && board[1][1] == player && board[1][2] == player) {
    return true;
  }
  if (board[2][0] == player && board[2][1] == player && board[2][2] == player) {
    return true;
  }
  if (board[0][0] == player && board[1][0] == player && board[1][0] == player) {
    return true;
  }
  if (board[0][1] == player && board[1][1] == player && board[2][1] == player) {
    return true;
  }
  if (board[0][2] == player && board[1][2] == player && board[2][2] == player) {
    return true;
  }
  if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
    return true;
  }
  if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
    return true;
  }
  return false;
}

bool checkTie(char blank, char board[3][3]) {
  int check = 0;
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
	if (board[i][j] != blank) {
	  check++;
	}
      }
  }
  if (check > 8) {
    return true;
  }
  return false;
}
